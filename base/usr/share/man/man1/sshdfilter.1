.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "sshdfilter 1"
.TH sshdfilter 1 "2007-04-08" "perl v5.8.4" ""
.SH "NAME"
sshdfilter \- sshd brute force blocker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBsshd\fR wrapper script that generates \fBiptables\fR \s-1DROP\s0 rules when \fBsshd\fR reports any of i) no identify string sent by client ii) attempted login to a non-existant account iii) mupliple password failures for a valid account. \s-1DROP\s0 rules are added in realtime. There are two install routes, either as an \fBsshd\fR wrapper, in which case \fBsshd\fR messages are read directly by \fBsshdfilter\fR, or as a separate standalone program that parses \fBsshd\fR output via a didicated syslog named pipe.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBsshdfilter\fR blocks the frequent brute force attacks on \fBssh\fR daemons, it does this by directly reading the \fBsshd\fR logging output (or syslog output) and generating \fBiptables\fR rules, the process can be quick enough to block an attack before they get a chance to enter any password at all. The blocking policy is defined by a list of block rules largely by user name or by the type of user name.
.PP
There are two install routes, the old style \fBsshdfilter\fR starts \fBsshd\fR itself, having started \fBsshd\fR with the \fI\-e\fR and \fI\-D\fR options. The newer style uses a syslog configuration line that writes \fBsshd\fR messages to a dedicated named pipe, normally \fI/var/log/sshd.fifo\fR. Regardless, this means \fBsshdfilter\fR can see events as they happen and act on them as they happen. \fBsshdfilter\fR then looks for lines of the form:
.PP
\&\f(CW\*(C`Did not receive identification string from x.x.x.x\*(C'\fR
\&\f(CW\*(C`Illegal user x from x.x.x.x\*(C'\fR
\&\f(CW\*(C`Failed password for illegal user x from x.x.x.x port x ssh2\*(C'\fR
\&\f(CW\*(C`Failed password for x from x.x.x.x port x ssh2\*(C'\fR
.PP
When \fBsshd\fR produces any of these messages, the response of \fBsshdfilter\fR is defined by the configuration file \fI/etc/sshdfilterrc\fR. The default configuration file defines the first message as in instant block event that will install an iptables rule dropping that \s-1IP\s0. The next two lines are given one chance (ie. this chance) before an iptables dropping rule is generated. The latter message is given 3 chances before it is blocked.
.PP
These are in fact example messages, the exact wording varies between Linux distributions, so the distribution \fBsshdfilterrc\fR exists as a large header containing default policies, and a footer \fIpatterns/\fR, each file containing patterns for each Linux/sshd distribution. On installation, the header and the (hopefully) correct footer are added together to create your \fI/etc/sshdfilterrc\fR.
.PP
All new rules are inserted into a custom \fBiptables\fR chain, and to prevent the chain from becoming overloaded with old rules, old rules are deleted. Rule duration is also specified in the configuration file.
.PP
Taking some statistics from my logs before \fBsshdfilter\fR was implemented, the longest attempt from a single \s-1IP\s0 was half an hour long, trying around 1 username/password pair per second. Over 26 days there were attacks from 42 unique IPs, none of them ever came back after the attempt. Picking the oldest 10 of these attacks, they had 347, 306, 115, 115, 127, 18, 554, 107, 9, 52 failed\e(!\e) password attempts. Of these 1750 attempts, 720 were for root \- making a good case for blocking password authentication of the root account. 
.PP
With \fBsshdfilter\fR installed, taking each attack on a case by case basis:
 \fB1)\fR 347 attempts becomes 0 attempts \- first attemped guess was for a non-existant user, so was instantly blocked.
 \fB2)\fR 306 attempts becomes 0 attempts \- same reason, non-existant user.
 \fB3)\fR 115 attempts becomes 1 attempt \- first guess was for root and is allowed a default of 3 chances, the second guess was for a non-existant user and so was blocked anyway.
 \fB4)\fR 115 attempts becomes 1 attempt \- same as previous.
 \fB5)\fR 127 attempts becomes 3 attempts \- many initial guesses for root account, so \fBsshdfilter\fR blocks after the first 3 failed attempts.
 \fB6)\fR 18 attempts becomes 0 attempts \- first attempted guess was for a non-existant user, so was blocked instantly.
 \fB7)\fR 554 attempts becomes 3 attempts \- many initial guesses for root accont, so \fBsshdfilter\fR blocks after the first 3 failed attempts.
 \fB8)\fR 107 attempts becomes 1 attempt \- first guess was for a valid user (nobody), second guess was for a non-existant user so was blocked.
 \fB9)\fR 9 attempts becomes 0 attempts \- first guess was for a non-existant user so was blocked instantly.
 \fB10)\fR 52 attempts becomes 3 attempts \- many initial guesses for root accont, so \fBsshdfilter\fR blocks after the first 3 failed attempts.
.PP
Summerising, of these 10 sample attacks, 1750 attempts, 720 were for root, 1013 were for illegal accounts, the rest were for existing accounts. Using only user name gusses alone, \fBsshdfilter\fR would have blocked 1729 of these. In fact, until the authors of the brute force attacks improve their code and send an ssh id string, \fBsshdfilter\fR would actually have blocked 1744 attempts, allowing only 6 guesses of the root account over an average of 6 days. Had password based root access been banned, even these six would have been futile.
.SH "COMPATIBILITY"
.IX Header "COMPATIBILITY"
Right now \fBsshdfilter\fR works with Debian 3.1, Redhat 7.3 to 9.0, Fedora Core 2\-4, CentOS, Suse 10.0 \s-1RC\s0 1, RedHat Enterprise Linux 4, Slackware and gentoo, and the many derivatives. It also now supports ipfw for \s-1BSD\s0, Solaris and MacOSX support. It also works with Dropbear, the light weight sshd server. Each distribution uses different logging messages, so \fBsshdfilter\fR needs a pattern list for the target system. Patterns are supplied for RedHat 7.3 and 9.0 systems, RedHat Fedora Core 3 systems, Suse 10.0 \s-1RC\s0 1 and Debian 3.1 (sarge, stable) systems, the other distributions use patterns based on these 4.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
\&\fBsshdfilter\fR was written with common Linux distributions in mind, and so expects to find \fBperl\fR, the \fBiptables\fR command (or \fBipfw\fR command) and support syslog style logging. For the details, see \fI\s-1INSTALL\s0\fR.
.SH "OPTIONS"
.IX Header "OPTIONS"
If your \fBsshdfilter\fR is installed as a wrapper to \fBsshd\fR, all options on the command line are passed to \fBsshd\fR, \fBsshdfilter\fR takes all its options via the configuration file \fI/etc/sshdfilterrc\fR. See its man page for more information on the options.
.PP
If your \fBsshdfilter\fR is installed standalone and reads \fBsshd\fR messages via a syslog fifo, \fBsshdfilter\fR takes the option \fBlogpid=<pid of sshd>\fR. This will only be usful if you run multiple sshdfilters, as this allows sshdfilter identify messages from a particular sshd. sshd messages in syslog are from the children of the main sshd daemon, so sshdfilter will accept only messages from children of this pid.
.SH "FILES"
.IX Header "FILES"
\&\fI/usr/sbin/sshdfilter\fR \- main sshdfilter code.
\&\fI/etc/sshdfilterrc\fR \- sshdfilter configuration file.
.PP
\&\fI/etc/init.d/sshd\fR \- modified sshd startup script, so sshdfilter is run instead of sshd.
or
\&\fI/etc/init.d/sshdfilter\fR \- standalone startup file.
\&\fI/etc/sshdfilter.ipfw\fR \- ipfw state file, see \s-1INSTALL\s0.ipfw
.SH "DOWNLOAD"
.IX Header "DOWNLOAD"
The latest \fBsshdfilter\fR is available from <http://www.csc.liv.ac.uk/~greg/sshdfilter/>
.SH "BUGS"
.IX Header "BUGS"
None known. More likely there are features you don't like.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIsshdfilterrc\fR\|(5)
.SH "AUTHOR"
.IX Header "AUTHOR"
Written by Greg: greg at csc liv ac uk. Would welcome any comments.
.PP
LogWatch script written by Tommo: sshdfilter at gmail com.
.SH "LICENSE"
.IX Header "LICENSE"
This software is released under the terms of the \s-1GNU\s0 GPLv2. 
